+1. Создать модуль отвечающий за сообщения между модулями (Информационное ядро).
+2. Создать модуль работы с базой данных.
+3. Создать структуру работы с mvc частью.
  +1. Определить контроллер
  +2. Определить view
+4. Создать модуль инфоблока (Модуль отвечающий за добавление / изменение / удаление инфоблоков и получения / изменения / удаления из них информации)
  +1. Определить структуру базы данных
  +2. Определить удобную структуру полей
  +3. Определить структуру связей информации в каталогах (Отдельное поле или целый класс)

5. Создать модуль кеширования.
   Рассмотреть использование register_shutdown_function

+6. Создать основу шаблонизации. (Компоненты)
+7. Создать систему подключения файлов.
+8. Создать систему поиска компонентов.
+9. Создать sql builder для работы с данными, а не sql кодом.
+10. Протестировать spl_autoload_register
+11. Создать подключение модулей по spl_autoload_register
+12. Table orm
+13. class Page - массовый вызов class component для упрощения работы с компонентами

14. Система для соединения различных систем:
    система для склейки. Цель в том что бы дать возможность склеивать программы и апи. Разные и на прямую не совместимые.
    Принцип работы: есть контролльный файл с вызовом системы. Он, поочерёдно вызывает указанные системы, программы, апи (далее систему) и передаёт полученные данные контроллеру.
    Контроллер в свою очередь имеет возможность вызвать следующую Систему и / или просто обработать имеющиеся данные.
15. Система событий.
    Цель: предоставить возможность подписки на собития файлов, модулей даже если эти файлы/модули небыли подключены в ходе работы системы.
    Так же, предоставить возможность вызова скриптов на php через консоль (что бы исполнять скрипты, а пользователю сразу отдавать страницу).

16. admin ui

